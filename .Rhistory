sum(ll)
}
#######Gradient
gradlik_gen <- function(start) {
NXS <- dim(model.matrix(~XS))[2] - 1
NXO <- dim(model.matrix(~XO))[2] - 1
if (length(E) == 1) {
NE <- 1
Msigma <- cbind(rep(1, nrow(XO)))
} else {
NE <- dim(model.matrix(~E))[2]
Msigma <- E
}
if (length(V) == 1) {
NV <- 1
Mrho <- cbind(rep(1, nrow(XO)))
} else {
NV <- dim(model.matrix(~V))[2]
Mrho <- V
}
nObs <- length(YS)
NO <- length(YS[YS > 0])
nParam <- NXS + NXO + NE + NV
XS0 <- XS[YS == 0, , drop = FALSE]
XS1 <- XS[YS == 1, , drop = FALSE]
YO[is.na(YO)] <- 0
YO1 <- YO[YS == 1]
XO1 <- XO[YS == 1, , drop = FALSE]
ES0 <- Msigma[YS == 0, , drop = FALSE]
ES1 <- Msigma[YS == 1, , drop = FALSE]
VS0 <- Mrho[YS == 0, , drop = FALSE]
VS1 <- Mrho[YS == 1, , drop = FALSE]
N0 <- sum(YS == 0)
N1 <- sum(YS == 1)
M1 <- rep(1, N0 + N1)
u1 <- rep(1, N1)  #YS=1
u2 <- rep(1, N0)  #YS=0
## parameter indices
istartS <- 1:NXS
istartO <- seq(tail(istartS, 1) + 1, length = NXO)
ilambda <- seq(tail(istartO, 1) + 1, length = NE)
ikappa <- seq(tail(ilambda, 1) + 1, length = NV)
# if(sigma < 0) return(NA) ikappa <- tail(ilambda, 1) + 1
g <- start[istartS]
b <- start[istartO]
lambda <- start[ilambda]
# if(sigma < 0) return(matrix(NA, nObs, nParam))
kappa <- start[ikappa]
# if( ( rho < -1) || ( rho > 1)) return(matrix(NA, nObs, nParam))
mu20 <- as.numeric(XS0 %*% g)
mu21 <- as.numeric(XS1 %*% g)
mu11 <- as.numeric(XO1 %*% b)
# sigma0 <- exp(as.numeric(model.matrix(~ES0) %*% lambda)) sigma1 <-
# exp(as.numeric(model.matrix(~ES1) %*% lambda)) rho0 <-
# tanh(as.numeric(model.matrix(~VS0) %*% kappa)) rho1 <-
# tanh(as.numeric(model.matrix(~VS1) %*% kappa))
if (length(E) == 1) {
sigma0 <- exp(as.numeric(model.matrix(~ES0 - 1) %*% lambda))
sigma1 <- exp(as.numeric(model.matrix(~ES1 - 1) %*% lambda))
} else {
sigma0 <- exp(as.numeric(model.matrix(~ES0) %*% lambda))
sigma1 <- exp(as.numeric(model.matrix(~ES1) %*% lambda))
}
if (length(NV) == 1) {
rho0 <- tanh(as.numeric(model.matrix(~VS0 - 1) %*% kappa))
rho1 <- tanh(as.numeric(model.matrix(~VS1 - 1) %*% kappa))
} else {
rho0 <- tanh(as.numeric(model.matrix(~VS0) %*% kappa))
rho1 <- tanh(as.numeric(model.matrix(~VS1) %*% kappa))
}
z1 <- YO1 - mu11
z <- z1/sigma1
r <- sqrt(1 - rho1^2)
A_rho <- 1/r
A_rrho <- rho1/r
# B <- (XS1.g + rho/sigma*u2)/r
zeta <- (mu21 * A_rho + z * A_rrho)
MZeta <- exp(dnorm(zeta, log = TRUE) - pnorm(zeta, log.p = TRUE))
Mmu2 <- exp(dnorm(-mu20, log = TRUE) - pnorm(-mu20, log.p = TRUE))
Q_rho <- mu21 * rho1 * ((A_rho)^2) + z * (1 + A_rrho^2)
Q_rrho <- mu21 * (1 + 2 * A_rrho^2) + 2 * z * rho1 * (1 + A_rrho^2)
gradient <- matrix(0, nObs, nParam)
gradient[YS == 0, istartS] <- -u2 * XS0 * Mmu2
gradient[YS == 1, istartS] <- u1 * XS1 * MZeta * A_rho
gradient[YS == 1, istartO] <- u1 * XO1 * (z - MZeta * A_rrho) * (1/sigma1)
if (length(E) == 1) {
gradient[YS == 1, ilambda] <- u1 * model.matrix(~ES1 - 1) * (z^2 - 1 -
MZeta * z * A_rrho)
} else {
gradient[YS == 1, ilambda] <- u1 * model.matrix(~ES1) * (z^2 - 1 - MZeta *
z * A_rrho)
}
if (length(V) == 1) {
gradient[YS == 1, ikappa] <- u1 * model.matrix(~VS1 - 1) * MZeta * A_rho *
((pracma::sech(as.numeric(model.matrix(~VS1 - 1) %*% kappa)))^2) *
(mu21 * rho1 * (A_rho^2) + z * (1 + (A_rrho^2)))
} else {
gradient[YS == 1, ikappa] <- u1 * model.matrix(~VS1) * MZeta * A_rho *
((pracma::sech(as.numeric(model.matrix(~VS1) %*% kappa)))^2) * (mu21 *
rho1 * (A_rho^2) + z * (1 + (A_rrho^2)))
}
colSums(gradient)
}
step2(YS, XS, YO, XO)
####################################
ilambda <- rep(1, NE)
ikappa <- rep(0, NV)
ilambda
ikappa
colnames(XO)
YS <- model.response(model.frame(dambexp ~ age + female + educ + blhisp + totchr + ins + income))
YSLevels <- levels(as.factor(YS))
YO <- model.response(model.frame(lnambx ~ age + female + educ + blhisp + totchr + ins))
XS <- cbind(age, female, educ, blhisp, totchr, ins, income)
XS <- model.matrix(~XS)
XO <- cbind(age, female, educ, blhisp, totchr, ins)
XO <- model.matrix(~XO)
NXS <- ncol(XS)
NXO <- ncol(XO)
(start <- step2(YS, XS, YO, XO))
#################### Dispersion Matrix #
E <- outcomeS
# NE <- ncol(E)
if (length(E) == 1) {
NE <- 1
Msigma <- cbind(rep(1, nrow(XO)))
} else {
NE <- dim(model.matrix(~E))[2] - 1
Msigma <- E
}
################## Correlation Matrix #
V <- outcomeC
if (length(V) == 1) {
NV <- 1
Mrho <- cbind(rep(1, nrow(XO)))
} else {
NV <- dim(model.matrix(~V))[2] - 1
Mrho <- V
}
####################################
ilambda <- rep(1, NE)
ikappa <- rep(0, NV)
if (length(V) == 1 & length(E) == 1) {
start <- c(start[(1:NXS)], start[((NXS + 1):(NXS + NXO))],
start[(NXS + NXO +1)], start[(NXS + NXO + 2)])
names(start) <- c(colnames(XS), colnames(XO), "sigma", colnames(E), "correlation")
} else {
if (length(V) == 1 & length(E) != 1) {
start <- c(start[(1:NXS)], start[((NXS + 1):(NXS + NXO))],
start[(NXS +NXO + 1)], ilambda, start[(NXS + NXO + 2)])
names(start) <- c(colnames(XS), colnames(XO), "interceptS", colnames(E),
"correlation")
} else {
if (length(V) != 1 & length(E) == 1) {
start <- c(start[(1:NXS)], start[((NXS + 1):(NXS + NXO))], start[(NXS +
NXO + 1)], start[(NXS + NXO + 2)], ikappa)
names(start) <- c(colnames(XS), colnames(XO), "sigma", "interceptC",
colnames(V))
} else {
start <- c(start[(1:NXS)], start[((NXS + 1):(NXS + NXO))], start[(NXS +
NXO + 1)], ilambda, start[(NXS + NXO + 2)], ikappa)
names(start) <- c(colnames(XS), colnames(XO), "interceptS", colnames(E),
"interceptC", colnames(V))
}
}
}
start
NXS <- dim(model.matrix(~XS))[2] - 1
NXO <- dim(model.matrix(~XO))[2] - 1
if (length(E) == 1) {
NE <- 1
Msigma <- cbind(rep(1, nrow(XO)))
} else {
NE <- dim(model.matrix(~E))[2]
Msigma <- E
}
if (length(V) == 1) {
NV <- 1
Mrho <- cbind(rep(1, nrow(XO)))
} else {
NV <- dim(model.matrix(~V))[2]
Mrho <- V
}
## parameter indices
istartS <- 1:NXS
istartO <- seq(tail(istartS, 1) + 1, length = NXO)
ilambda <- seq(tail(istartO, 1) + 1, length = NE)
ikappa <- seq(tail(ilambda, 1) + 1, length = NV)
g <- start[istartS]
b <- start[istartO]
lambda <- start[ilambda]
# if(sigma < 0) return(NA)
kappa <- start[ikappa]
mu2 <- XS %*% g
mu1 <- XO %*% b
if (NE == 1) {
sigma <- exp(model.matrix(~1, data = data.frame(rep(1, nrow(XO)))) %*%
lambda)
} else {
sigma <- exp(model.matrix(~Msigma) %*% lambda)
}
if (NV == 1) {
rho <- tanh(model.matrix(~1, data = data.frame(rep(1, nrow(XO)))) %*%
kappa)
} else {
rho <- tanh(model.matrix(~Mrho) %*% kappa)
}
z1 <- YO - mu1
z <- z1 * (1/sigma)
r <- sqrt(1 - rho^2)
A_rho <- 1/r
A_rrho <- rho/r
zeta <- mu2 * A_rho + z * A_rrho
ll <- ifelse(YS == 0, (pnorm(-mu2, log.p = TRUE)), dnorm(z, log = TRUE) -
log(sigma) + (pnorm(zeta, log.p = TRUE)))
sum(ll)
NXS <- dim(model.matrix(~XS))[2] - 1
NXO <- dim(model.matrix(~XO))[2] - 1
if (length(E) == 1) {
NE <- 1
Msigma <- cbind(rep(1, nrow(XO)))
} else {
NE <- dim(model.matrix(~E))[2]
Msigma <- E
}
if (length(V) == 1) {
NV <- 1
Mrho <- cbind(rep(1, nrow(XO)))
} else {
NV <- dim(model.matrix(~V))[2]
Mrho <- V
}
nObs <- length(YS)
NO <- length(YS[YS > 0])
nParam <- NXS + NXO + NE + NV
XS0 <- XS[YS == 0, , drop = FALSE]
XS1 <- XS[YS == 1, , drop = FALSE]
YO[is.na(YO)] <- 0
YO1 <- YO[YS == 1]
XO1 <- XO[YS == 1, , drop = FALSE]
ES0 <- Msigma[YS == 0, , drop = FALSE]
ES1 <- Msigma[YS == 1, , drop = FALSE]
VS0 <- Mrho[YS == 0, , drop = FALSE]
VS1 <- Mrho[YS == 1, , drop = FALSE]
N0 <- sum(YS == 0)
N1 <- sum(YS == 1)
M1 <- rep(1, N0 + N1)
u1 <- rep(1, N1)  #YS=1
u2 <- rep(1, N0)  #YS=0
## parameter indices
istartS <- 1:NXS
istartO <- seq(tail(istartS, 1) + 1, length = NXO)
ilambda <- seq(tail(istartO, 1) + 1, length = NE)
ikappa <- seq(tail(ilambda, 1) + 1, length = NV)
g <- start[istartS]
b <- start[istartO]
lambda <- start[ilambda]
# if(sigma < 0) return(matrix(NA, nObs, nParam))
kappa <- start[ikappa]
# if( ( rho < -1) || ( rho > 1)) return(matrix(NA, nObs, nParam))
mu20 <- as.numeric(XS0 %*% g)
mu21 <- as.numeric(XS1 %*% g)
mu11 <- as.numeric(XO1 %*% b)
# sigma0 <- exp(as.numeric(model.matrix(~ES0) %*% lambda)) sigma1 <-
# exp(as.numeric(model.matrix(~ES1) %*% lambda)) rho0 <-
# tanh(as.numeric(model.matrix(~VS0) %*% kappa)) rho1 <-
# tanh(as.numeric(model.matrix(~VS1) %*% kappa))
if (length(E) == 1) {
sigma0 <- exp(as.numeric(model.matrix(~ES0 - 1) %*% lambda))
sigma1 <- exp(as.numeric(model.matrix(~ES1 - 1) %*% lambda))
} else {
sigma0 <- exp(as.numeric(model.matrix(~ES0) %*% lambda))
sigma1 <- exp(as.numeric(model.matrix(~ES1) %*% lambda))
}
if (length(NV) == 1) {
rho0 <- tanh(as.numeric(model.matrix(~VS0 - 1) %*% kappa))
rho1 <- tanh(as.numeric(model.matrix(~VS1 - 1) %*% kappa))
} else {
rho0 <- tanh(as.numeric(model.matrix(~VS0) %*% kappa))
rho1 <- tanh(as.numeric(model.matrix(~VS1) %*% kappa))
}
z1 <- YO1 - mu11
z <- z1/sigma1
r <- sqrt(1 - rho1^2)
A_rho <- 1/r
A_rrho <- rho1/r
# B <- (XS1.g + rho/sigma*u2)/r
zeta <- (mu21 * A_rho + z * A_rrho)
MZeta <- exp(dnorm(zeta, log = TRUE) - pnorm(zeta, log.p = TRUE))
Mmu2 <- exp(dnorm(-mu20, log = TRUE) - pnorm(-mu20, log.p = TRUE))
Q_rho <- mu21 * rho1 * ((A_rho)^2) + z * (1 + A_rrho^2)
Q_rrho <- mu21 * (1 + 2 * A_rrho^2) + 2 * z * rho1 * (1 + A_rrho^2)
gradient <- matrix(0, nObs, nParam)
gradient[YS == 0, istartS] <- -u2 * XS0 * Mmu2
gradient[YS == 1, istartS] <- u1 * XS1 * MZeta * A_rho
gradient[YS == 1, istartO] <- u1 * XO1 * (z - MZeta * A_rrho) * (1/sigma1)
if (length(E) == 1) {
gradient[YS == 1, ilambda] <- u1 * model.matrix(~ES1 - 1) * (z^2 - 1 -
MZeta * z * A_rrho)
} else {
gradient[YS == 1, ilambda] <- u1 * model.matrix(~ES1) * (z^2 - 1 - MZeta *
z * A_rrho)
}
if (length(V) == 1) {
gradient[YS == 1, ikappa] <- u1 * model.matrix(~VS1 - 1) * MZeta * A_rho *
((pracma::sech(as.numeric(model.matrix(~VS1 - 1) %*% kappa)))^2) *
(mu21 * rho1 * (A_rho^2) + z * (1 + (A_rrho^2)))
} else {
gradient[YS == 1, ikappa] <- u1 * model.matrix(~VS1) * MZeta * A_rho *
((pracma::sech(as.numeric(model.matrix(~VS1) %*% kappa)))^2) * (mu21 *
rho1 * (A_rho^2) + z * (1 + (A_rrho^2)))
}
colSums(gradient)
NXS <- dim(model.matrix(~XS))[2] - 1
NXO <- dim(model.matrix(~XO))[2] - 1
if (length(E) == 1) {
NE <- 1
Msigma <- cbind(rep(1, nrow(XO)))
} else {
NE <- dim(model.matrix(~E))[2]
Msigma <- E
}
if (length(V) == 1) {
NV <- 1
Mrho <- cbind(rep(1, nrow(XO)))
} else {
NV <- dim(model.matrix(~V))[2]
Mrho <- V
}
## parameter indices
istartS <- 1:NXS
istartO <- seq(tail(istartS, 1) + 1, length = NXO)
ilambda <- seq(tail(istartO, 1) + 1, length = NE)
ikappa <- seq(tail(ilambda, 1) + 1, length = NV)
g <- start[istartS]
b <- start[istartO]
lambda <- start[ilambda]
# if(sigma < 0) return(NA)
kappa <- start[ikappa]
# if( ( rho < -1) || ( rho > 1)) return(NA)
mu2 <- XS %*% g
mu1 <- XO %*% b
# sigma <- exp(model.matrix(~E) %*% lambda) rho <- tanh(model.matrix(~1,data =
# data.frame(rep(1,nrow(XO))))%*% kappa)
if (NE == 1) {
sigma <- exp(model.matrix(~1, data = data.frame(rep(1, nrow(XO)))) %*%
lambda)
} else {
sigma <- exp(model.matrix(~Msigma) %*% lambda)
}
if (NV == 1) {
rho <- tanh(model.matrix(~1, data = data.frame(rep(1, nrow(XO)))) %*%
kappa)
} else {
rho <- tanh(model.matrix(~Mrho) %*% kappa)
}
z1 <- YO - mu1
z <- z1 * (1/sigma)
r <- sqrt(1 - rho^2)
A_rho <- 1/r
A_rrho <- rho/r
zeta <- mu2 * A_rho + z * A_rrho
ll <- ifelse(YS == 0, (pnorm(-mu2, log.p = TRUE)), dnorm(z, log = TRUE) -
log(sigma) + (pnorm(zeta, log.p = TRUE)))
sum(ll)
NXS <- dim(model.matrix(~XS))[2] - 1
NXO <- dim(model.matrix(~XO))[2] - 1
if (length(E) == 1) {
NE <- 1
Msigma <- cbind(rep(1, nrow(XO)))
} else {
NE <- dim(model.matrix(~E))[2]
Msigma <- E
}
if (length(V) == 1) {
NV <- 1
Mrho <- cbind(rep(1, nrow(XO)))
} else {
NV <- dim(model.matrix(~V))[2]
Mrho <- V
}
nObs <- length(YS)
NO <- length(YS[YS > 0])
nParam <- NXS + NXO + NE + NV
XS0 <- XS[YS == 0, , drop = FALSE]
XS1 <- XS[YS == 1, , drop = FALSE]
YO[is.na(YO)] <- 0
YO1 <- YO[YS == 1]
XO1 <- XO[YS == 1, , drop = FALSE]
ES0 <- Msigma[YS == 0, , drop = FALSE]
ES1 <- Msigma[YS == 1, , drop = FALSE]
VS0 <- Mrho[YS == 0, , drop = FALSE]
VS1 <- Mrho[YS == 1, , drop = FALSE]
N0 <- sum(YS == 0)
N1 <- sum(YS == 1)
M1 <- rep(1, N0 + N1)
u1 <- rep(1, N1)  #YS=1
u2 <- rep(1, N0)  #YS=0
## parameter indices
istartS <- 1:NXS
istartO <- seq(tail(istartS, 1) + 1, length = NXO)
ilambda <- seq(tail(istartO, 1) + 1, length = NE)
ikappa <- seq(tail(ilambda, 1) + 1, length = NV)
# if(sigma < 0) return(NA) ikappa <- tail(ilambda, 1) + 1
g <- start[istartS]
b <- start[istartO]
lambda <- start[ilambda]
# if(sigma < 0) return(matrix(NA, nObs, nParam))
kappa <- start[ikappa]
# if( ( rho < -1) || ( rho > 1)) return(matrix(NA, nObs, nParam))
mu20 <- as.numeric(XS0 %*% g)
mu21 <- as.numeric(XS1 %*% g)
mu11 <- as.numeric(XO1 %*% b)
# sigma0 <- exp(as.numeric(model.matrix(~ES0) %*% lambda)) sigma1 <-
# exp(as.numeric(model.matrix(~ES1) %*% lambda)) rho0 <-
# tanh(as.numeric(model.matrix(~VS0) %*% kappa)) rho1 <-
# tanh(as.numeric(model.matrix(~VS1) %*% kappa))
if (E == 1) {
sigma0 <- exp(as.numeric(model.matrix(~ES0 - 1) %*% lambda))
sigma1 <- exp(as.numeric(model.matrix(~ES1 - 1) %*% lambda))
} else {
sigma0 <- exp(as.numeric(model.matrix(~ES0) %*% lambda))
sigma1 <- exp(as.numeric(model.matrix(~ES1) %*% lambda))
}
if (NV == 1) {
rho0 <- tanh(as.numeric(model.matrix(~VS0 - 1) %*% kappa))
rho1 <- tanh(as.numeric(model.matrix(~VS1 - 1) %*% kappa))
} else {
rho0 <- tanh(as.numeric(model.matrix(~VS0) %*% kappa))
rho1 <- tanh(as.numeric(model.matrix(~VS1) %*% kappa))
}
z1 <- YO1 - mu11
z <- z1/sigma1
r <- sqrt(1 - rho1^2)
A_rho <- 1/r
A_rrho <- rho1/r
# B <- (XS1.g + rho/sigma*u2)/r
zeta <- (mu21 * A_rho + z * A_rrho)
MZeta <- exp(dnorm(zeta, log = TRUE) - pnorm(zeta, log.p = TRUE))
Mmu2 <- exp(dnorm(-mu20, log = TRUE) - pnorm(-mu20, log.p = TRUE))
Q_rho <- mu21 * rho1 * ((A_rho)^2) + z * (1 + A_rrho^2)
Q_rrho <- mu21 * (1 + 2 * A_rrho^2) + 2 * z * rho1 * (1 + A_rrho^2)
gradient <- matrix(0, nObs, nParam)
gradient[YS == 0, istartS] <- -u2 * XS0 * Mmu2
gradient[YS == 1, istartS] <- u1 * XS1 * MZeta * A_rho
gradient[YS == 1, istartO] <- u1 * XO1 * (z - MZeta * A_rrho) * (1/sigma1)
if (E == 1) {
gradient[YS == 1, ilambda] <- u1 * model.matrix(~ES1 - 1) * (z^2 - 1 -
MZeta * z * A_rrho)
} else {
gradient[YS == 1, ilambda] <- u1 * model.matrix(~ES1) * (z^2 - 1 - MZeta *
z * A_rrho)
}
if (V == 1) {
gradient[YS == 1, ikappa] <- u1 * model.matrix(~VS1 - 1) * MZeta * A_rho *
((pracma::sech(as.numeric(model.matrix(~VS1 - 1) %*% kappa)))^2) *
(mu21 * rho1 * (A_rho^2) + z * (1 + (A_rrho^2)))
} else {
gradient[YS == 1, ikappa] <- u1 * model.matrix(~VS1) * MZeta * A_rho *
((pracma::sech(as.numeric(model.matrix(~VS1) %*% kappa)))^2) * (mu21 *
rho1 * (A_rho^2) + z * (1 + (A_rrho^2)))
}
colSums(gradient)
if (E == 1) {
gradient[YS == 1, ilambda] <- u1 * model.matrix(~ES1 - 1) * (z^2 - 1 -
MZeta * z * A_rrho)
} else {
gradient[YS == 1, ilambda] <- u1 * model.matrix(~ES1) * (z^2 - 1 - MZeta *
z * A_rrho)
}
E
if (E == 1) {
gradient[YS == 1, ilambda] <- u1 * model.matrix(~ES1 - 1) * (z^2 - 1 -
MZeta * z * A_rrho)
} else {
gradient[YS == 1, ilambda] <- u1 * model.matrix(~ES1) * (z^2 - 1 - MZeta *
z * A_rrho)
}
ifelse(E == 1, gradient[YS == 1, ilambda] <- u1 * model.matrix(~ES1 - 1) * (z^2 - 1 -
MZeta * z * A_rrho),
gradient[YS == 1, ilambda] <- u1 * model.matrix(~ES1) * (z^2 - 1 - MZeta *
z * A_rrho))
gradient[YS == 1, ilambda] <- ifelse(E == 1,
u1 * model.matrix(~ES1 - 1) * (z^2 - 1 - MZeta * z * A_rrho),
u1 * model.matrix(~ES1) * (z^2 - 1 - MZeta * z * A_rrho))
u1 * model.matrix(~ES1 - 1) * (z^2 - 1 - MZeta * z * A_rrho)
gradient[YS == 1, ilambda] <- ifelse(E == 1,
u1 * model.matrix(~ES1 - 1) * (z^2 - 1 - MZeta * z * A_rrho),
u1 * model.matrix(~ES1) * (z^2 - 1 - MZeta * z * A_rrho))
outcomeS
ncol(E)
V
ncol(V)
E
NV
length(NV)
V
NE
NV
V
library(ssmodels)
library(ssmodels)
install.packages("digest")
library(ssmodels)
pkgdown::build_site()
library(ssmodels)
usethis::use_news_md()
usethis::use_news_md()
usethis::use_readme_rmd()
usethis::use_pkgdown()
pkgdown::build_site()
```{r example}
