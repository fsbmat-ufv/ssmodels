digamma <- function(x) { digamma(x) }  # função psi
d_c_d_nu <- 0.5 * digamma((nu + 1) / 2) - 0.5 * digamma(nu / 2) - 0.5 / nu
grad_nu <- u * (
d_c_d_nu -
0.5 * log(1 + z^2 / nu) +
Qnu^2 * z^2 / (2 * nu) +
# Esse termo deve ser computado numericamente:
# Aqui placeholder para 0, substitua se quiser calcular!
0
) + (1 - u) * 0  # Placeholder para dlnT(-w gamma; nu)
#--------------------------------------------
# Resultado final
#--------------------------------------------
grad <- c(grad_beta, grad_gamma, grad_rho, grad_sigma, grad_nu)
names(grad) <- c("beta1", "beta2", "gamma1", "gamma2", "rho", "sigma", "nu")
return(grad)
}
#--------------------------------------------
# Calcular o gradiente numérico com numDeriv
#--------------------------------------------
grad_num <- grad(func = loglik_fun, x = theta)
#--------------------------------------------
# Calcular o gradiente analítico
#--------------------------------------------
grad_ana <- grad_analytical(theta)
#--------------------------------------------
# Calcular o gradiente analítico
#--------------------------------------------
grad_ana <- grad_analytical(theta, y, u, x, w)
#--------------------------------------------
# Gradiente em relação a nu
#--------------------------------------------
d_c_d_nu <- 0.5 * digamma((nu + 1) / 2) - 0.5 * digamma(nu / 2) - 0.5 / nu
grad_nu <- u * (
d_c_d_nu -
0.5 * log(1 + z^2 / nu) +
Qnu^2 * z^2 / (2 * nu) +
# Esse termo deve ser computado numericamente:
0
) + (1 - u) * 0  # Placeholder para dlnT(-w gamma; nu)
#--------------------------------------------
# Calcular o gradiente numérico com numDeriv
#--------------------------------------------
grad_num <- grad(func = loglik_fun, x = theta)
#--------------------------------------------
# Calcular o gradiente analítico
#--------------------------------------------
grad_ana <- grad_analytical(theta, y, u, x, w)
library(numDeriv)
Mnu <- function(x, nu) {
dt(x, df = nu) / pt(x, df = nu)
}
grad_analytical <- function(theta, y, u, x, w) {
beta <- theta[1:2]
gamma <- theta[3:4]
rho <- theta[5]
sigma <- theta[6]
nu <- theta[7]
z <- (y - sum(x * beta)) / sigma
Qnu <- sqrt((nu + 1) / (nu + z^2))
A_rho <- 1 / sqrt(1 - rho^2)
A_rrho <- rho * A_rho
zeta <- A_rrho * z + A_rho * sum(w * gamma)
eta <- Qnu * zeta
M_eta <- Mnu(eta, nu + 1)
M_sel <- Mnu(-sum(w * gamma), nu)
grad_beta <- numeric(2)
for (k in 1:2) {
grad_beta[k] <- u * x[k] * Qnu / sigma * (
Qnu * z +
(zeta / (nu + z^2) * z - A_rrho) * M_eta
)
}
grad_gamma <- numeric(2)
for (k in 1:2) {
grad_gamma[k] <- u * w[k] * A_rho * Qnu * M_eta -
(1 - u) * w[k] * M_sel
}
grad_rho <- u * Qnu * A_rho^3 * (z + rho * sum(w * gamma)) * M_eta
grad_sigma <- u / sigma * (
-1 + Qnu^2 * z^2 +
Qnu * z * (zeta / (nu + z^2) * z - A_rrho) * M_eta
)
d_c_d_nu <- 0.5 * digamma((nu + 1) / 2) - 0.5 * digamma(nu / 2) - 0.5 / nu
grad_nu <- u * (
d_c_d_nu -
0.5 * log(1 + z^2 / nu) +
Qnu^2 * z^2 / (2 * nu) +
0  # Placeholder
) + (1 - u) * 0
grad <- c(grad_beta, grad_gamma, grad_rho, grad_sigma, grad_nu)
names(grad) <- c("beta1", "beta2", "gamma1", "gamma2", "rho", "sigma", "nu")
return(grad)
}
y <- 1.5
u <- 1
x <- c(1, 0.5)
w <- c(0.7, -0.3)
theta <- c(0.2, -0.1, 0.3, 0.4, 0.5, 1.2, 5)
grad_ana <- grad_analytical(theta, y, u, x, w)
print(grad_ana)
library(numDeriv)
Mnu <- function(x, nu) {
dt(x, df = nu) / pt(x, df = nu)
}
grad_analytical <- function(theta, y, u, x, w) {
beta <- theta[1:2]
gamma <- theta[3:4]
rho <- theta[5]
sigma <- theta[6]
nu <- theta[7]
z <- (y - sum(x * beta)) / sigma
Qnu <- sqrt((nu + 1) / (nu + z^2))
A_rho <- 1 / sqrt(1 - rho^2)
A_rrho <- rho * A_rho
zeta <- A_rrho * z + A_rho * sum(w * gamma)
eta <- Qnu * zeta
M_eta <- Mnu(eta, nu + 1)
M_sel <- Mnu(-sum(w * gamma), nu)
grad_beta <- numeric(2)
for (k in 1:2) {
grad_beta[k] <- u * x[k] * Qnu / sigma * (
Qnu * z +
(zeta / (nu + z^2) * z - A_rrho) * M_eta
)
}
grad_gamma <- numeric(2)
for (k in 1:2) {
grad_gamma[k] <- u * w[k] * A_rho * Qnu * M_eta -
(1 - u) * w[k] * M_sel
}
grad_rho <- u * Qnu * A_rho^3 * (z + rho * sum(w * gamma)) * M_eta
grad_sigma <- u / sigma * (
-1 + Qnu^2 * z^2 +
Qnu * z * (zeta / (nu + z^2) * z - A_rrho) * M_eta
)
d_c_d_nu <- 0.5 * digamma((nu + 1) / 2) - 0.5 * digamma(nu / 2) - 0.5 / nu
grad_nu <- u * (
d_c_d_nu -
0.5 * log(1 + z^2 / nu) +
Qnu^2 * z^2 / (2 * nu) +
0  # Placeholder
) + (1 - u) * 0
grad <- c(grad_beta, grad_gamma, grad_rho, grad_sigma, grad_nu)
names(grad) <- c("beta1", "beta2", "gamma1", "gamma2", "rho", "sigma", "nu")
return(grad)
}
y <- 1.5
u <- 1
x <- c(1, 0.5)
w <- c(0.7, -0.3)
theta <- c(0.2, -0.1, 0.3, 0.4, 0.5, 1.2, 5)
grad_ana <- grad_analytical(theta, y, u, x, w)
print(grad_ana)
library(numDeriv)
Mnu <- function(x, nu) {
dt(x, df = nu) / pt(x, df = nu)
}
grad_analytical <- function(theta, y, u, x, w) {
beta <- theta[1:2]
gamma <- theta[3:4]
rho <- theta[5]
sigma <- theta[6]
nu <- theta[7]
z <- (y - sum(x * beta)) / sigma
Qnu <- sqrt((nu + 1) / (nu + z^2))
A_rho <- 1 / sqrt(1 - rho^2)
A_rrho <- rho * A_rho
zeta <- A_rrho * z + A_rho * sum(w * gamma)
eta <- Qnu * zeta
M_eta <- Mnu(eta, nu + 1)
M_sel <- Mnu(-sum(w * gamma), nu)
grad_beta <- numeric(2)
for (k in 1:2) {
grad_beta[k] <- u * x[k] * Qnu / sigma * (
Qnu * z +
(zeta / (nu + z^2) * z - A_rrho) * M_eta
)
}
grad_gamma <- numeric(2)
for (k in 1:2) {
grad_gamma[k] <- u * w[k] * A_rho * Qnu * M_eta -
(1 - u) * w[k] * M_sel
}
grad_rho <- u * Qnu * A_rho^3 * (z + rho * sum(w * gamma)) * M_eta
grad_sigma <- u / sigma * (
-1 + Qnu^2 * z^2 +
Qnu * z * (zeta / (nu + z^2) * z - A_rrho) * M_eta
)
d_c_d_nu <- 0.5 * digamma((nu + 1) / 2) - 0.5 * digamma(nu / 2) - 0.5 / nu
grad_nu <- u * (
d_c_d_nu -
0.5 * log(1 + z^2 / nu) +
Qnu^2 * z^2 / (2 * nu) +
0  # Placeholder
) + (1 - u) * 0
grad <- c(grad_beta, grad_gamma, grad_rho, grad_sigma, grad_nu)
names(grad) <- c("beta1", "beta2", "gamma1", "gamma2", "rho", "sigma", "nu")
return(grad)
}
y <- 1.5
u <- 1
x <- c(1, 0.5)
w <- c(0.7, -0.3)
theta <- c(0.2, -0.1, 0.3, 0.4, 0.5, 1.2, 5)
grad_ana <- grad_analytical(theta, y, u, x, w)
print(grad_ana)
loglik_fun <- function(th) {
beta <- th[1:2]
gamma <- th[3:4]
rho <- th[5]
sigma <- th[6]
nu <- th[7]
z <- (y - sum(x * beta)) / sigma
Qnu <- sqrt((nu + 1) / (nu + z^2))
A_rho <- 1 / sqrt(1 - rho^2)
A_rrho <- rho * A_rho
zeta <- A_rrho * z + A_rho * sum(w * gamma)
eta <- Qnu * zeta
c_val <- lgamma((nu + 1)/2) - lgamma(nu/2) - 0.5*log(pi) - 0.5*log(nu) - log(sigma)
log_t <- c_val - 0.5 * (nu + 1) * log(1 + z^2 / nu)
log_T_eta <- log(pt(eta, df = nu + 1))
log_T_sel <- log(pt(-sum(w * gamma), df = nu))
ll <- u * log_t + u * log_T_eta + (1 - u) * log_T_sel
return(ll)
}
grad_num <- grad(func = loglik_fun, x = theta)
print(data.frame(
Parameter = names(grad_ana),
Numerical = grad_num,
Analytical = grad_ana,
Difference = grad_num - grad_ana
))
library(numDeriv)
Mnu <- function(x, nu) {
dt(x, df = nu) / pt(x, df = nu)
}
grad_analytical <- function(theta, y, u, x, w) {
beta <- theta[1:2]
gamma <- theta[3:4]
rho <- theta[5]
sigma <- theta[6]
nu <- theta[7]
z <- (y - sum(x * beta)) / sigma
Qnu <- sqrt((nu + 1) / (nu + z^2))
A_rho <- 1 / sqrt(1 - rho^2)
A_rrho <- rho * A_rho
zeta <- A_rrho * z + A_rho * sum(w * gamma)
eta <- Qnu * zeta
M_eta <- Mnu(eta, nu + 1)
M_sel <- Mnu(-sum(w * gamma), nu)
grad_beta <- numeric(2)
for (k in 1:2) {
grad_beta[k] <- u * x[k] * Qnu / sigma * (
Qnu * z +
(zeta / (nu + z^2) * z - A_rrho) * M_eta
)
}
grad_gamma <- numeric(2)
for (k in 1:2) {
grad_gamma[k] <- u * w[k] * A_rho * Qnu * M_eta -
(1 - u) * w[k] * M_sel
}
grad_rho <- u * Qnu * A_rho^3 * (z + rho * sum(w * gamma)) * M_eta
grad_sigma <- u / sigma * (
-1 + Qnu^2 * z^2 +
Qnu * z * (zeta / (nu + z^2) * z - A_rrho) * M_eta
)
d_c_d_nu <- 0.5 * digamma((nu + 1) / 2) - 0.5 * digamma(nu / 2) - 0.5 / nu
grad_nu <- u * (
d_c_d_nu -
0.5 * log(1 + z^2 / nu) +
Qnu^2 * z^2 / (2 * nu) +
0  # Placeholder
) + (1 - u) * 0
grad <- c(grad_beta, grad_gamma, grad_rho, grad_sigma, grad_nu)
names(grad) <- c("beta1", "beta2", "gamma1", "gamma2", "rho", "sigma", "nu")
return(grad)
}
y <- 1.5
u <- 1
x <- c(1, 0.5)
w <- c(0.7, -0.3)
theta <- c(0.2, -0.1, 0.3, 0.4, 0.5, 1.2, 5)
grad_ana <- grad_analytical(theta, y, u, x, w)
print(grad_ana)
loglik_fun <- function(th) {
beta <- th[1:2]
gamma <- th[3:4]
rho <- th[5]
sigma <- th[6]
nu <- th[7]
z <- (y - sum(x * beta)) / sigma
Qnu <- sqrt((nu + 1) / (nu + z^2))
A_rho <- 1 / sqrt(1 - rho^2)
A_rrho <- rho * A_rho
zeta <- A_rrho * z + A_rho * sum(w * gamma)
eta <- Qnu * zeta
c_val <- lgamma((nu + 1)/2) - lgamma(nu/2) - 0.5*log(pi) - 0.5*log(nu) - log(sigma)
log_t <- c_val - 0.5 * (nu + 1) * log(1 + z^2 / nu)
log_T_eta <- log(pt(eta, df = nu + 1))
log_T_sel <- log(pt(-sum(w * gamma), df = nu))
ll <- u * log_t + u * log_T_eta + (1 - u) * log_T_sel
return(ll)
}
grad_num <- grad(func = loglik_fun, x = theta)
print(data.frame(
Parameter = names(grad_ana),
Numerical = grad_num,
Analytical = grad_ana,
Difference = grad_num - grad_ana
))
library(numDeriv)
Mnu <- function(x, nu) {
dt(x, df = nu) / pt(x, df = nu)
}
grad_analytical <- function(theta, y, u, x, w) {
beta <- theta[1:2]
gamma <- theta[3:4]
rho <- theta[5]
sigma <- theta[6]
nu <- theta[7]
z <- (y - sum(x * beta)) / sigma
Qnu <- sqrt((nu + 1) / (nu + z^2))
A_rho <- 1 / sqrt(1 - rho^2)
A_rrho <- rho * A_rho
zeta <- A_rrho * z + A_rho * sum(w * gamma)
eta <- Qnu * zeta
M_eta <- Mnu(eta, nu + 1)
M_sel <- Mnu(-sum(w * gamma), nu)
#--------------------------------------------
# Derivada numérica de ln T(eta; nu+1) em relação a nu
#--------------------------------------------
dlnT_eta_dnu <- grad(
function(nu_) log(pt(eta, df = nu_)),
x = nu + 1
)
#--------------------------------------------
# Derivada numérica de ln T(-w'gamma; nu) em relação a nu
#--------------------------------------------
dlnT_sel_dnu <- grad(
function(nu_) log(pt(-sum(w * gamma), df = nu_)),
x = nu
)
#--------------------------------------------
# Score para beta
#--------------------------------------------
grad_beta <- numeric(2)
for (k in 1:2) {
grad_beta[k] <- u * x[k] * Qnu / sigma * (
Qnu * z +
(zeta / (nu + z^2) * z - A_rrho) * M_eta
)
}
#--------------------------------------------
# Score para gamma
#--------------------------------------------
grad_gamma <- numeric(2)
for (k in 1:2) {
grad_gamma[k] <- u * w[k] * A_rho * Qnu * M_eta -
(1 - u) * w[k] * M_sel
}
#--------------------------------------------
# Score para rho
#--------------------------------------------
grad_rho <- u * Qnu * A_rho^3 * (z + rho * sum(w * gamma)) * M_eta
#--------------------------------------------
# Score para sigma
#--------------------------------------------
grad_sigma <- u / sigma * (
-1 + Qnu^2 * z^2 +
Qnu * z * (zeta / (nu + z^2) * z - A_rrho) * M_eta
)
#--------------------------------------------
# Score para nu (agora completo!)
#--------------------------------------------
d_c_d_nu <- 0.5 * digamma((nu + 1) / 2) - 0.5 * digamma(nu / 2) - 0.5 / nu
grad_nu <- u * (
d_c_d_nu -
0.5 * log(1 + z^2 / nu) +
Qnu^2 * z^2 / (2 * nu) +
dlnT_eta_dnu
) + (1 - u) * dlnT_sel_dnu
#--------------------------------------------
# Resultado final
#--------------------------------------------
grad <- c(grad_beta, grad_gamma, grad_rho, grad_sigma, grad_nu)
names(grad) <- c("beta1", "beta2", "gamma1", "gamma2", "rho", "sigma", "nu")
return(grad)
}
# Dados
y <- 1.5
u <- 1
x <- c(1, 0.5)
w <- c(0.7, -0.3)
theta <- c(0.2, -0.1, 0.3, 0.4, 0.5, 1.2, 5)
# Gradiente analítico com termos de nu completos
grad_ana <- grad_analytical(theta, y, u, x, w)
print(grad_ana)
# Função log-verossimilhança
loglik_fun <- function(th) {
beta <- th[1:2]
gamma <- th[3:4]
rho <- th[5]
sigma <- th[6]
nu <- th[7]
z <- (y - sum(x * beta)) / sigma
Qnu <- sqrt((nu + 1) / (nu + z^2))
A_rho <- 1 / sqrt(1 - rho^2)
A_rrho <- rho * A_rho
zeta <- A_rrho * z + A_rho * sum(w * gamma)
eta <- Qnu * zeta
c_val <- lgamma((nu + 1)/2) - lgamma(nu/2) - 0.5*log(pi) - 0.5*log(nu) - log(sigma)
log_t <- c_val - 0.5 * (nu + 1) * log(1 + z^2 / nu)
log_T_eta <- log(pt(eta, df = nu + 1))
log_T_sel <- log(pt(-sum(w * gamma), df = nu))
ll <- u * log_t + u * log_T_eta + (1 - u) * log_T_sel
return(ll)
}
# Gradiente numérico para comparar
grad_num <- grad(func = loglik_fun, x = theta)
# Comparação
print(data.frame(
Parameter = names(grad_ana),
Numerical = grad_num,
Analytical = grad_ana,
Difference = grad_num - grad_ana
))
rm(list = ls())
cat("\014")
getwd()
#devtools::install(build_vignettes=FALSE, dependencies=FALSE)
library(devtools)
library(roxygen2)
library(testthat)
#library(tidyverse)
devtools::session_info()       # (opcional) Verifica as versões/carregamento das dependências
devtools::load_all()           # Carrega todas as funções do pacote localmente
devtools::document()           # Atualiza a documentação com base nos arquivos Roxygen2
devtools::clean_vignettes()    # Limpa os arquivos temporários das vinhetas (recomendado antes de buildar)
devtools::build_vignettes()    # Compila as vinhetas (gera .html e .R files em inst/doc)
devtools::install()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_favicons(overwrite = TRUE)
pkgdown::build_site()
unlink("docs", recursive = TRUE)  # Remove a pasta docs inteira
pkgdown::build_site()
pkgdown::build_site()
rm(list = ls())
cat("\014")
getwd()
#devtools::install(build_vignettes=FALSE, dependencies=FALSE)
library(devtools)
library(roxygen2)
library(testthat)
#library(tidyverse)
devtools::session_info()       # (opcional) Verifica as versões/carregamento das dependências
devtools::load_all()           # Carrega todas as funções do pacote localmente
devtools::document()           # Atualiza a documentação com base nos arquivos Roxygen2
devtools::clean_vignettes()    # Limpa os arquivos temporários das vinhetas (recomendado antes de buildar)
devtools::build_vignettes()    # Compila as vinhetas (gera .html e .R files em inst/doc)
devtools::install()
detach("package:ssmodels", unload=TRUE)
devtools::check()              # Faz todas as checagens formais do pacote (inclui vinhetas, testes, etc.)
pkgdown::clean_site()
pkgdown::build_site()
file.create("docs/.nojekyll")
devtools::check_rhub()
devtools::check_rhub()
rhubv2::check("C:/Users/Fernando/Documents/GitHub/ssmodels")
install.packages("rhub")
rhubv2::check("C:/Users/Fernando/Documents/GitHub/ssmodels")
rhub::check_for_cran("C:/Users/Fernando/Documents/GitHub/ssmodels")
?rhubv2
rhub::rhub_setup()
rhub::rhub_check()
rhub::rhub_check()
devtools::release()
check_rhub()
rhub::check_rhub()
rhub::check_for_cran()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_setup()
install.packages("rhub")
install.packages("rhub")
remotes::install_github("r-hub/rhub")  # Última versão
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
rhub::rhub_check()
devtools::release()
spell_check()
devtools::spell_check()
devtools::load_all()           # Carrega todas as funções do pacote localmente
devtools::document()           # Atualiza a documentação com base nos arquivos Roxygen2
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::release()
devtools::check_win_devel()
devtools::release()
